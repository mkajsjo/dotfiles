global !p
import re

def to_upper(string):
	with_underscores = re.sub(
		r"([^_])([A-Z])",
		r"\1_\2",
		string
	)

	return with_underscores.upper()
endglobal

# print aliases
snippet print
std::cout << "${1}" << std::endl;${2}
endsnippet


snippet cout
std::cout << "${1}" << std::endl;${2}
endsnippet


snippet echo
std::cout << "${1}" << std::endl;${2}
endsnippet
# end print aliases


snippet inc
#include ${1}
endsnippet


snippet incio
#include <iostream>
endsnippet


snippet main
int main(int argc, char* argv[])
{
	${1}
}
endsnippet


snippet class
#ifndef __`!p snip.rv = to_upper(fn.replace('.', '_'))`__
#define __`!p snip.rv = to_upper(fn.replace('.', '_'))`__

class `!p snip.rv = fn.split('.')[0]`
{
public:
	${1}
private:
	${2}
};

#endif
endsnippet


# Open header file and autocomplete function signature.
snippet /::(\w+)/ "" r
`!p
import os.path

directory = os.path.dirname(path)
class_name = fn.split('.')[0]
function_name = match.group(1)

header_file = None
try:
	with open(directory + '/' + class_name + '.h', 'r') as header_file:
		content = header_file.read()

		matches = re.search(
			r"template <class (\w+)>",
			content
		)

		template_declaration = ''
		template_name = ''
		if matches != None:
			template_declaration = matches.group(0) + "\n"
			template_name = '<' + matches.group(1) + '>'

		matches = re.search(
			r"(\w+)\s+" + function_name + r"(\([^)]*\))",
			content
		)

		if matches == None:
			snip.rv = function_name + '()'
		else:
			return_value = matches.group(1)
			params = matches.group(2)
			snip.rv = template_declaration \
					+ return_value \
					+ ' ' \
					+ class_name \
					+ template_name \
					+ '::' \
					+ function_name \
					+ params
except IOError:
	snip.rv = function_name + '()'
`
{
	${1}
}
endsnippet
